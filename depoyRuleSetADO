trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  ODM_HOSTNAME: 'your-hostname'
  ODM_PORT: 'your-port'
  ODM_USERNAME: 'your-username'
  ODM_PASSWORD: 'your-password'
  ODM_FILE: 'path-to-your-file'
  ODM_MERGING: 'NONE'
  ODM_VERSION: 'NONE'
  ODM_RULEAPP_NAME: 'your-ruleAppName'
  ODM_RULEAPP_VERSION: 'your-ruleAppVersion'
  ODM_RULESET_NAME: 'your-ruleSetName'
  ODM_RULESET_VERSION: 'your-ruleSetVersion'

steps:
- script: |
    import java.net.HttpURLConnection
    import java.net.URL
    import java.io.OutputStream
    import java.nio.file.Files
    import java.nio.file.Paths

    // Function to make HTTP POST request
    def makePostRequest(urlString, payload, username, password) {
        URL url = new URL(urlString)
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("POST")
        connection.setDoOutput(true)
        connection.setRequestProperty("Content-Type", "application/json")
        connection.setRequestProperty("Authorization", "Basic " + "${username}:${password}".bytes.encodeBase64().toString())

        OutputStream os = connection.getOutputStream()
        os.write(payload.getBytes("UTF-8"))
        os.close()

        int responseCode = connection.getResponseCode()
        connection.disconnect()
        return responseCode
    }

    // Get step properties from environment variables
    def inProps = [
        hostname: System.getenv('ODM_HOSTNAME'),
        port: System.getenv('ODM_PORT'),
        username: System.getenv('ODM_USERNAME'),
        password: System.getenv('ODM_PASSWORD'),
        file: System.getenv('ODM_FILE'),
        merging: System.getenv('ODM_MERGING'),
        version: System.getenv('ODM_VERSION'),
        ruleAppName: System.getenv('ODM_RULEAPP_NAME'),
        ruleAppVersion: System.getenv('ODM_RULEAPP_VERSION'),
        ruleSetName: System.getenv('ODM_RULESET_NAME'),
        ruleSetVersion: System.getenv('ODM_RULESET_VERSION')
    ]

    String hostname = inProps['hostname']
    String port = inProps['port']
    String username = inProps['username']
    String password = inProps['password']
    String file = inProps['file']
    String merging = inProps['merging']
    String version = inProps['version']
    String ruleAppName = inProps['ruleAppName']
    String ruleAppVersion = inProps['ruleAppVersion']
    String ruleSetName = inProps['ruleSetName']
    String ruleSetVersion = inProps['ruleSetVersion']

    if ((merging.equals('NONE') && !version.equals('NONE')) || (!merging.equals('NONE') && version.equals('NONE'))) {
        println ('[Error] If using automatic version policies, neither Merging Policy nor Versioning policy can be NONE.')
        println ('[Possible Solution] Either select a value (other than NONE) for both Merging Policy and Versioning Policy ' +
                 'or leave both as NONE and explicitly specify the RuleApp Name, RuleApp Version, RuleSet Name, and RuleSet Version.')
        System.exit(1)
    }

    String uri
    if (merging.equals('NONE') && version.equals('NONE')) {
        uri = "http://${hostname}:${port}/res/api/v1/ruleapps/${ruleAppName}/${ruleAppVersion}/${ruleSetName}/${ruleSetVersion}"
    } else {
        uri = "http://${hostname}:${port}/res/api/v1/ruleapps?merging=${merging}&version=${version}"
    }

    println ("[Action] Deploying archive to ${uri}...")

    // Read file content
    byte[] fileContent = Files.readAllBytes(Paths.get(file))
    String fileContentBase64 = fileContent.encodeBase64().toString()

    // Create JSON payload
    String payload = """
    {
        "file": "${fileContentBase64}"
    }
    """

    int responseCode = makePostRequest(uri, payload, username, password)
    if (responseCode == 200) {
        println ("[Ok] Archive deployed successfully.")
        System.exit(0)
    } else {
        println ("[Error] Could not deploy archive. Response code: ${responseCode}")
        System.exit(1)
  }
  displayName: 'Deploy ODM Archive'
